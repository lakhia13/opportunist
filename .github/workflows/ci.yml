name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Install Playwright browsers
      run: |
        playwright install chromium
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Format check with black
      run: |
        black --check --diff src/ tests/
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Security check with Safety
      run: |
        safety check --json || true
    
    - name: Security check with Bandit
      run: |
        bandit -r src/ -f json || true

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test import structure
      run: |
        python -c "from src.config import settings; print('Config loaded successfully')"
        python -c "from src.models.opportunity import OpportunityCreate; print('Models loaded successfully')"
    
    - name: Create deployment artifact
      run: |
        tar -czf opportunist-${{ github.sha }}.tar.gz \
          src/ \
          main.py \
          requirements.txt \
          Procfile \
          runtime.txt \
          README.md \
          DEPLOYMENT.md
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: opportunist-deployment
        path: opportunist-${{ github.sha }}.tar.gz
        retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download deployment artifact
      uses: actions/download-artifact@v3
      with:
        name: opportunist-deployment
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment"
        # Add staging deployment commands here
        # For example, Heroku deployment:
        # heroku releases:create --app opportunist-staging

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Download deployment artifact
      uses: actions/download-artifact@v3
      with:
        name: opportunist-deployment
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment"
        # Add production deployment commands here
        # For example:
        # heroku releases:create --app opportunist-prod
        # or render deployment
        # or fly.io deployment

  notify:
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "‚úÖ Deployment pipeline completed successfully"
        else
          echo "‚ùå Deployment pipeline failed"
          exit 1
        fi
